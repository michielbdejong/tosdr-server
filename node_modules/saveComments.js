'use strict';

module.exports = function(req, res, next){
	if('POST' !== req.method){
		console.log('Request should be post');
		return next();
	}
	
	var post = {
		title: req.body.title,
		point: req.body.point,
		services: req.body.services,
		comment: req.body.comment
	};
	if(undefined === post.title || post.title.length <= 0 ||
	   undefined === post.point || post.point.length <= 0 ||
	   undefined === post.services || post.services.length <= 0 ||
	   undefined === post.comment || post.comment.length <= 0){
		console.log('Not all fields were filled in: ', post);
		return res.send(500);
	}
	var q = module.require('q'),
	    fs = module.require('fs'),
	    path = module.require('path'),
	    moment = module.require('moment'),
	    config = module.require('config'),
        prettyjson = module.require('prettyjson');
	var timestamp = moment().unix(),
	    email = req.session.email,
	    target = path.resolve(path.dirname(module.parent.filename), '../', config.comments.target),
	    defer = q.defer();
	
	fs.exists(target, defer.resolve);
	var p = defer.promise;
	p.then(
		function(exists){
			if(exists){
				return;
			}
			var mkdirDefer = q.defer();
			fs.mkdir(target, mkdirDefer.resolve);
			return mkdirDefer.promise;
		}
	)
	.then(
		function(){
			var contents = {
				id: post.title.replace(' ', '-', 'g').replace(/[^A-Za-z0-9_-]/g, ''),
				discussion: 'form',
				title: post.title,
				services: post.services,
				// topics: []
				tosdr: {
					point: post.point,
					// score: 50
					tldr: post.comment
				},
				meta: {
					author: email
				}
			};
			return q.nfcall(fs.writeFile,
			                path.resolve(target, timestamp + email + '.json'),
			                prettyjson(contents));
	 })
	 .then(function(){
		res.send(200);
	 })
	 .fail(function(error){
		console.error(error);
		res.send(500);
	 });
};
